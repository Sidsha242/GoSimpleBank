database/sql: package in Go provides a standard interface for interacting with SQL databases
- we are using postgres driver [github.com/lib/pq]
sql.Open()

sqlc : generates type-safe Go code from SQL queries
- write raw SQL queries in .sql files, and sqlc generates Go code to execute those queries.
- sqlc supports database transactions, allowing you to group multiple queries into a single unit of work.
- sqlc generate

-------------------------------------------------------------------------------

Interface DBTX (generated by sqlc)

- abstracts over both database connections (*sql.DB) and transactions (*sql.Tx).
- defines methods that any database connection or transaction must implement:

--ExecContext: Executes a query without returning any rows.
--PrepareContext: Prepares a statement for later queries or executions.
--QueryContext: Executes a query that returns rows.
--QueryRowContext: Executes a query that is expected to return at most one row.

------------------------------------------------

Struct Queries (generated by sqlc)

- contains methods for executing the SQL queries defined in your .sql files.

type Queries struct {
    db DBTX //reference of DBTX interface
}

holds a reference to a DBTX interface, 

------------------------------------------------

New Constructor (creates new Queries instance with the provided DBTX interface)

func New(db DBTX) *Queries {
    return &Queries{db: db}
}

function creates a new Queries instance with the provided DBTX interface.

----------------------------------------------

WithTx Method (allows creating a new Queries instance that uses a transaction (*sql.Tx) instead of regular db connection)

allows creating a new Queries instance that uses a transaction (*sql.Tx) instead of a regular database connection